version: 2.1




orbs:
  slack: circleci/slack@4.9.3 
#nvm use 14.15.0  
#https://github.com/udacity/cdond-c3-projectstarter/blob/master/instructions/3-configuration-management.md
#https://aws.amazon.com/premiumsupport/knowledge-center/troubleshoot-iam-policy-issues/
#https://aws.amazon.com/premiumsupport/knowledge-center/troubleshoot-iam-policy-issues/
#https://aws.amazon.com/premiumsupport/knowledge-center/ec2-launch-issue/
#s3   udapeople-re25fdg4r5pmz437
#J:\udacity\project3\cdond-c3-projectstarter\backend\src\modules\config\config.service.ts

commands:
  # Exercise: Reusable Job Code
  print_pipeline_id:
    parameters:
      id: 
        type: string
    steps:
      - run: echo << parameters.id >>

  # Exercise - Rollback
  destroy_environment:
    parameters:
      # Add parameter here   
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
   
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}       
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |  
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/8Zr83qBwdw3ySFNfLwWWk/migration_<< parameters.workflow_ID >>)
            #SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
            #  Add revert code here. You can find this in the Getting Started section.
              npm run migration:revert
            #  exit 1
            fi

jobs:
  notify:
    docker:
      - image: 'cimg/base:stable'
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var 
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "CI fail ...",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: fail   
          #s    
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD 
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            #npm install oauth-sign@^0.9.0
             
       
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build      
      - slack/notify:
           event: pass
           template: basic_success_1
      - slack/notify:
           event: fail
           template: basic_fail_1
  build-backend:
    docker:
      - image: circleci/node:13.8.0
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD 
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build      
      - slack/notify:
           event: pass
           template: basic_success_1
      - slack/notify:
           event: fail
           template: basic_fail_1           
  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here       
      - checkout
      - run:
          name: Front-end build
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
           event: pass
           template: basic_success_1
      - slack/notify:
           event: fail
           template: basic_fail_1             
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here       
      - checkout
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run test 
      - slack/notify:
           event: pass
           template: basic_success_1
      - slack/notify:
           event: fail
           template: basic_fail_1        
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
           event: pass
           template: basic_success_1
      - slack/notify:
           event: fail
           template: basic_fail_1  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm install oauth-sign@^0.9.0
            #npm audit fix --audit-level=critical --force
            
            #npm audit fix --force
            #npm audit --audit-level=critical
            npm audit fix --force --production
            #fgfsdga
            #npm audit --audit-level=none
      - slack/notify:
           event: pass
           template: basic_success_1
      - slack/notify:
           event: fail
           template: basic_fail_1  
  
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum install -y tar gzip
      - run: yum install sudo -y
      - run:
          name: install tar
          command: |
            yum install -y tar gzip       
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              #exit 1
             
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              # exit 1
      
      #- run: sudo chmod 777 ~/project/.circleci/ansible/inventory.txt        
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            sudo chmod 777 inventory.txt        
            aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text >> inventory.txt
              #--output text >> ~/project/.circleci/ansible/inventory.txt
            #exit 1
      
                  
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      #- destroy_environment
    #
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      # from https://registry.hub.docker.com/u/ansible/
      - image: python:3.7-alpine3.11  #ansible/awx_web # rating : 10M+ Downloads 110 Stars
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      - checkout 
      #- name: Set authorized key  
      #    authorized_key:
      #    user: UDACITYKEY
      #    state: present
      #    key:  ["18:54:2b:3e:b5:e2:9f:ee:43:fd:22:35:8c:36:af:33"]
      - add_ssh_keys:
          fingerprints: ["18:54:2b:3e:b5:e2:9f:ee:43:fd:22:35:8c:36:af:33"]
 
      # attach workspace
      - attach_workspace:
          at: ~/ 
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk update && apk upgrade
            apk add --update ansible 
            #apk add  aws-cli
            apk add python curl
            apk add  tar
            apk add  gzip
            apk add sudo
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws

            #exit 1
      #- run: 
      #    name: change 
      #    command: |       
      #      sudo chmod 744 ~/project/.circleci/ansible/inventory.txt 
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            sudo chmod 744 inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml 
            

            # exit 1
      # Here's where you will add some code to rollback on failure      
      - destroy_environment

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
             # Run and save the migration output
            npm run migrations > migrations_dump.txt
            
            #sudo su
            #echo 65536 | sudo tee -a /proc/sys/fs/inotify/max_user_watches
            #npm install
            # Run and save the migration output
            #sudo npm cache clean -f
            #sudo npm install -g n
            #sudo n stable
            #npm fund
            #npm audit fix
            #npm run migrations > migrations_dump.txt
            #exit 1 #
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                #curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl https://kvdb.io/8Zr83qBwdw3ySFNfLwWWk/migration_${CIRCLE_WORKFLOW_ID:0:7} -k -d '1'
            fi
            #exit 1
     # Here's where you will add some code to rollback on failure      
      #- destroy_environment
  
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      #- image: amazon/aws-cli
      - image: ubuntu:latest
    steps:
      # Checkout code from git
      - checkout 
      - run:
          name: Install dependencies
           
          command: |
            # your code here
            # 
            #apt-get install sudo -y
            #usermod -aG sudo ubuntu
            apt-get update && DEBIAN_FRONTEND="noninteractive" TZ="America/New_York" apt-get install -y tzdata
            apt install  apt-utils -y
            apt install python3-pip -y
            apt install ansible -y
            apt install nodejs -y
            apt install npm -y
            apt-get install awscli -y
      - run:
          name: Get backend url
          command: |
            # your code here
            #export API_URL="http://${BACKEND_IP}:3030"
            #echo "${API_URL}"

            export BACKEND_IP=$(aws ec2 describe-instances  --query "Reservations[*].Instances[*].PublicIpAddress"  --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

            



      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: ubuntu:latest
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint    
      #- name: Set authorized key  
      #    authorized_key:
      #    user: UDACITYKEY
      #    state: present
      #    key:  ["18:54:2b:3e:b5:e2:9f:ee:43:fd:22:35:8c:36:af:33"]
      - add_ssh_keys:
          fingerprints: ["18:54:2b:3e:b5:e2:9f:ee:43:fd:22:35:8c:36:af:33"]
      # attach workspace
      - attach_workspace:
          at: ~/
          #paths:
          #  - project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            # your code here
            apt-get update && DEBIAN_FRONTEND="noninteractive" TZ="America/New_York" apt-get install -y tzdata
            apt install  apt-utils -y
            apt-get install -y tar
            apt-get -y install gzip
            apt install python3-pip -y
            apt install ansible -y
            apt install nodejs -y
            apt install npm -y
            apt-get install awscli -y
            #
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml 
                  # Here's where you will add some code to rollback on failure  

            #npm install
            #pm2 stop default
            #pm2 start npm -- start

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: ubuntu:latest
    steps:
      - checkout
          
      - run:
          name: Install dependencies
          command: |
            # your code here
            apt-get update && DEBIAN_FRONTEND="noninteractive" TZ="America/New_York" apt-get install -y tzdata
            apt install  apt-utils -y
            apt-get install -y tar
            apt install curl -y
            apt-get -y install gzip
            apt install python3-pip -y
            apt install ansible -y
            apt install nodejs -y
            apt install npm -y
            apt-get install awscli -y
      - run:
          name: Get backend url
          command: |
            # your code here
              # Fetch and prepare the BACKEND_IP env var
              export BACKEND_IP=$(aws ec2 describe-instances  --query "Reservations[*].Instances[*].PublicIpAddress"  --output text)
              

      - run:
          name: Backend smoke test.
          command: |
              BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text)
              export API_URL=http://${BACKEND_PUBLIC_IP}:3030
              echo ${BACKEND_PUBLIC_IP}
              echo backend-${CIRCLE_WORKFLOW_ID:0:7}
              echo ${API_URL}
              if curl -s $API_URL/api/status | grep "ok"
              then
                exit 0
              else
                exit 1
              fi
          #  # your code here
          #    #!/bin/bash
          #    export BACKEND_IP=$(aws ec2 describe-instances  --query "Reservations[*].Instances[*].PublicIpAddress"  --output text)
          #    export API_URL="http://${BACKEND_IP}:3030"
          #    echo "${API_URL}"
              
          #    if curl "${API_URL}/api/status" | grep "ok"
          #    then
          #        exit 0 
          #        #return 0
          #    else
          #        exit 1
          #        #return 1
          #    fi
      - run:
          name: Frontend smoke test.
          command: |
              FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
              echo $FRONTEND_WEBSITE
              if curl -s $FRONTEND_WEBSITE | grep "Welcome"
              then
                exit 0
              else
                exit 1
              fi

          #  # your code here
          #  #!/bin/bash
          #  URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
          # 
          #  echo ${URL} 
          #  
          #  if curl -s ${URL} | grep "Welcome"
          #  then
          #      # Change this to 0 after the job fails
          #    exit 0
          #  else
          #    exit 1
          #  fi
      # Here's where you wil
      #- destroy_environment
      - revert-migrations

##
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
      #- image: ubuntu:latest
    steps:
      - checkout
     #     
    #  - run:
    #      name: Install dependencies
    #      command: |
    #        # your code here
    #        apt-get update && DEBIAN_FRONTEND="noninteractive" TZ="America/New_York" apt-get install -y tzdata
    #        apt install  apt-utils -y
    #        apt-get install -y tar
    #        apt install curl -y
    #        apt-get -y install gzip
    #        apt install python3-pip -y
    #        apt install ansible -y
    #        apt install nodejs -y
    #        apt install npm -y
    #        apt-get install awscli -y
    #        apt  install awscli -y
      - run:
          name: Install dependancies - Backup Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/8Zr83qBwdw3ySFNfLwWWk/old_workflow_id -d "${OLD_WORKFLOW_ID}"
            #export OLD_WRKFLOW_ID=$(aws cloudformation \
            #list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            #--no-paginate --output text)
            #echo "Old Workflow ID: $OLD_WRKFLOW_ID"
            #curl https://kvdb.io/8Zr83qBwdw3ySFNfLwWWk/old_workflow_id -d "${OLD_WRKFLOW_ID}"   -k -d '1'   
            #aws cloudformation \
            #list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            #--no-paginate --output text > ~/textfile.txt
     
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws  cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
  
  
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      
      - run:
          name: Fetch old stack workflow id
          command: |
             export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
             echo Stack names: "${STACKS[@]}"
             export OldWorkflowID=$(curl --insecure https://kvdb.io/8Zr83qBwdw3ySFNfLwWWk/old_workflow_id)
             echo Old Workflow ID: $OldWorkflowID

           #  # your code here
           #  # Fetch the Old workflow ID
           #  export OldWorkflowID=$(aws cloudformation \
           #          list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
           #          --no-paginate --output text)
           #  echo OldWorkflowID: "${OldWorkflowID}"
           #  echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
           #  # Fetch the stack names          
           #  export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
           #          --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
           #  echo Stack names: "${STACKS[@]}"





            #export STACKS_created=($(aws cloudformation list-stacks \
            #    --query "StackSummaries[*].StackName" \
            #    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            #echo Stack names : "${STACKS_created[@]}"
            #export OldWrkflowID=$(curl --insecure https://kvdb.io/AfxCuACWvcrzuTJxyg9dLE/old_workflow_id)
            #echo Old Workflow ID: $OldWrkflowID
      
      
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(curl --insecure https://kvdb.io/8Zr83qBwdw3ySFNfLwWWk/old_workflow_id)
            echo Old Workflow ID: $OldWorkflowID 
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "--------------------DELETE CONFIRMED------------------------"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              echo s3://udapeople-${OldWorkflowID} deleted
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              echo udapeople-backend-${OldWorkflowID}   deleted
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              echo udapeople-frontend-${OldWorkflowID} deleted
            else
              echo "XXXXXXXXXXX  CANNOT CLEAN  XXXXXXXXXXXXXXX"
            fi

            
          #  #export OldWrkflowID=$(curl --insecure https://kvdb.io/AfxCuACWvcrzuTJxyg9dLE/old_workflow_id)
          ##  echo Old Workflow ID: $OldWrkflowID 
          ##  export OldBucketID=$(cat ~/textfile.txt)
          #  if [[ "${STACKS[@]}" =~ "${OldBucketID}" ]]
          #  then
          #    aws s3 rm "s3://udapeople-${OldBucketID}" --recursive
          #    aws cloudformation delete-stack --stack-name "udapeople-backend-${OldBucketID}"
          #    aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldBucketID}"
          #  fi
            
##
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires : [build-frontend]
      - test-backend:  
          requires : [build-backend]  
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]   
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]  #     only: [test-feature-branch]     
      - configure-infrastructure:
          requires: [deploy-infrastructure] 
      - run-migrations:
          requires: [configure-infrastructure]     
      - deploy-frontend:
          requires: [run-migrations]   # filters:
      - deploy-backend:
          requires: [run-migrations]       
      - smoke-test: 
          requires: [deploy-backend, deploy-frontend]     
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]    
  send-notification:
    jobs:
      - notify:
          
          context: slack-secrets        
           