version: 2.1
orbs:
  slack: circleci/slack@4.9.3 
#https://github.com/udacity/cdond-c3-projectstarter/blob/master/instructions/3-configuration-management.md
commands:
  # Exercise: Reusable Job Code
  print_pipeline_id:
    parameters:
      id: 
        type: string
    steps:
      - run: echo << parameters.id >>

  # Exercise - Rollback
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}
 

jobs:
  notify:
    docker:
      - image: 'cimg/base:stable'
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var 
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "CI fail ...",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: fail   
          #s    
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD 
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            #npm install oauth-sign@^0.9.0
      - slack/notify:
           event: pass
           template: basic_success_1
      - slack/notify:
           event: fail
           template: basic_fail_1
  build-backend:
    docker:
      - image: circleci/node:13.8.0
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD 
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - slack/notify:
           event: pass
           template: basic_success_1
      - slack/notify:
           event: fail
           template: basic_fail_1           
  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here       
      - checkout
      - run:
          name: Front-end build
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
           event: pass
           template: basic_success_1
      - slack/notify:
           event: fail
           template: basic_fail_1             
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here       
      - checkout
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run test 
      - slack/notify:
           event: pass
           template: basic_success_1
      - slack/notify:
           event: fail
           template: basic_fail_1        
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
           event: pass
           template: basic_success_1
      - slack/notify:
           event: fail
           template: basic_fail_1  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm install oauth-sign@^0.9.0
            #npm audit fix --audit-level=critical --force
            
            #npm audit fix --force
            #npm audit --audit-level=critical
            npm audit fix --force --production
            #fgfsdga
            #npm audit --audit-level=none
      - slack/notify:
           event: pass
           template: basic_success_1
      - slack/notify:
           event: fail
           template: basic_fail_1  
  
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              #exit 1
             
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              # exit 1
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output=text >> ~/ansible/inventory.txt
            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy_environment
    
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      # from https://registry.hub.docker.com/u/ansible/
      - image: python:3.7-alpine3.11  #ansible/awx_web # rating : 10M+ Downloads 110 Stars
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      - checkout 
      - name: Set authorized key  
          authorized_key:
          user: UDACITYKEY
          state: present
          key:  ["18:54:2b:3e:b5:e2:9f:ee:43:fd:22:35:8c:36:af:33"]

 
      # attach workspace
      - attach_workspace:
          at: ~/
          paths:
            - project/.circleci/ansible/inventory.txt 
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk update && apk upgrade
            apk add --update ansible 
            apk add --update aws-cli
            apk add --update tar
            apk add --update gzip

            #exit 1
      - run:
          name: Configure server
          command: |
            
            ansible-playbook -i inventory.txt configure-server.yml
            # exit 1
      # Here's where you will add some code to rollback on failure      
      - destroy_environment

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                  curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                  # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                  curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
            exit 1
     # Here's where you will add some code to rollback on failure      
      - destroy_environment
  
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout 
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      -checkout
      # Add ssh keys with fingerprint    
      - name: Set authorized key  
          authorized_key:
          user: UDACITYKEY
          state: present
          key:  ["18:54:2b:3e:b5:e2:9f:ee:43:fd:22:35:8c:36:af:33"]

      # attach workspace
      - attach_workspace:
          at: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible 
            apk update && apk add nodejs
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
                  # Here's where you will add some code to rollback on failure  

 
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires : [build-frontend]
      - test-backend:  
          requires : [build-backend]  
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]   
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
         # filters:
         #   branches:
         #     only: [test-feature-branch]     
      - configure-infrastructure:
          requires: [deploy-infrastructure]   
  send-notification:
    jobs:
      - notify:
          
          context: slack-secrets        